name: Upload to PyPi

on:
    release:
        types:
            [created]
            # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    autorelease:
        name: Create Release
        runs-on: "ubuntu-latest"
        strategy:
            matrix:
                os:
                    - "ubuntu-latest"
                python-version:
                    - "3.10"

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - name: Cache Poetry
              id: cache-poetry
              uses: actions/cache@v2.1.5
              with:
                  path: ~/.poetry
                  key: ${{ matrix.os }}-poetry
            # Only runs when key from caching step changes
            - name: Install latest version of Poetry
              if: steps.cache-poetry.outputs.cache-hit != 'true'
              run: |
                  curl -sSL https://install.python-poetry.org | python3 -
            # Poetry still needs to be re-prepended to the PATH on each run, since
            # PATH does not persist between runs.
            - name: Add Poetry to $PATH
              run: |
                  echo "$HOME/.poetry/bin" >> $GITHUB_PATH
            - name: Get Poetry version
              run: poetry --version
            - name: Cache dependencies
              id: cache-deps
              uses: actions/cache@v2.1.5
              with:
                  path: ${{github.workspace}}/.venv
                  key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: ${{ matrix.os }}-
            - name: Install deps
              if: steps.cache-deps.cache-hit != 'true'
              run: |
                  poetry config virtualenvs.in-project true
                  poetry install --no-interaction
            #     - name: Run tests
            #       run: poetry run pytest -v
            - name: Publish to PyPI
              env:
                  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
              run: |
                  poetry config pypi-token.pypi $PYPI_TOKEN
                  poetry version $(git describe --tags --abbrev=0)
                  poetry publish --build
